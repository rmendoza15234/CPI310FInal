<!DOCTYPE html> 
<html lang="en">
	<head>
		<meta charset = "UTF-8">
		<meta name="viewport" content="width-device-width, initial-scale-1.0">
		<title>Game</title>
		<link rel="stylesheet" type="text/css" href="static/cssfiles/style3.css">
	  </head>
      <br>
      <body>
  <nav class = "navbar">
    <a href = "static/ProfilePage.html" class = "logo"> JUMPING JAYBIRD  </a> <!-- the navbar and the easter egg included into it-->
    <ul>
    <li><a href="/">Home</a></li> <!-- the link to the home page -->
    <li><a href="static/aboutus.html">About Us</a></li> <!-- the link to the about us page --> 
    <li><a href="/standings">Standings</a></li>  <!-- the link to the standings page -->
	<li><a href="/profile">Profile</a></li> <!-- the link to the profile page -->
    <li><a href="/forum">Forum</a></li> <!-- the link to the forum page -->

    </ul>
  </nav>
  <main>
<div class="Gamelog"> <!-- div class for styling purposes -->
    {{#if user}}  <!-- checks if you are a user logged in -->
	
    <div class="gamebtn" > <!-- div class for styling purposes -->
        <button class="gamebutton" onmousedown="accelerate(-0.2)" onmouseup="accelerate(0.08)" style="text-align: center;">JUMP</button>
    </div>
    <div>
            <br>
            <script>

                //**************  DECLARING VARIABLES
                //the player object
                var flappyBird;

                var flappyBeak;
                //array of all the pipes to be generated
                var pipes = [];
                //score to keep track of points
                var score;
                //*************************************
                
                //this function will load all the components when the page loads
                function startGame() 
                {
                    //creating the flappy bird player
                    flappyBird = new component(30, 30, "blue", 10, 120);
                    flappyBeak = new component(20, 15, "orange", 40, 135);

                    //gravity pulling down
                    flappyBird.gravity = 0.05;
                    flappyBeak.gravity = 0.05;
                    //creating the score component
                 score = new component("32px", "Times", "#eceddd", 280, 40, "text");
                    //this will start the game
                    scene.start();
                }
                //************** CREATING THE GAME AREA
                var scene = 
                {
                    //canvas is where the game is drawn
                    canvas : document.createElement("canvas"),
                    start : function() 
                    {
                        //width of the canvas
                        this.canvas.width = 720;
                        //height of the canvas
                        this.canvas.height = 450;

                        //this defines the game as 2d
                        this.context = this.canvas.getContext("2d");
                        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
                        // this.canvas.fillStyle = "red";
                        // this.canvas.fillRect(10,10,720,450);
                        //start at the first frame
                        this.frameNo = 0;
                        //internal is updated
                        this.interval = setInterval(updateGameArea, 20);
                        },
                    clear : function() 
                    {
                        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    }
                }
                //*****************************************

                //******** FOR DEBUGGING PURPOSES
                let isStarted = 0;
                //making sure the game starts only once
                if(isStarted == 0)
                {
                    startGame();
                    //will only run once until reloaded
                    isStarted = 1;
                }
                //******************************
            
                
                //****************** BASICALLY A CONSTRUCTOR SET UP FOR CREATING GAME COMPONENTS FOR PLAYER, SCORE, ETC.
                function component(width, height, color, x, y, type) 
                {
                    //constructor variables ******************
                    this.type = type;  //what type of component
                    this.score = 0; //score inital value
                    this.width = width; //the width 
                    this.height = height; //the height
                    this.speedX = 0; //speed in x dir
                    this.speedY = 0;     //speed in y dir
                    this.x = x; //x position
                    this.y = y; //y position
                    this.gravity = 0; //the current gravity force
                    this.gravVelocity = 0; //the velocity of the gravity pulling down
                    //***************************************

                    //******** UPDATE FUNCTION *************
                    this.update = function() 
                    {
                        context = scene.context;
                        if (this.type == "text") 
                        {
                            //this keeps the text such as score up to date
                            context.font = this.width + " " + this.height;
                            context.fillStyle = color;
                            context.fillText(this.text, this.x, this.y);
                        } 
                        else 
                        {
                            context.fillStyle = color;
                            context.fillRect(this.x, this.y, this.width, this.height);
                        }
                    }
                    //************************

                    //*************NEW POSITION FUNCTION
                    this.newPos = function() 
                    {
                        //the gravity velocity will increase based on gravity
                        this.gravVelocity = this.gravVelocity + this.gravity;
                        //x position updates based on speed of x position
                        this.x = this.x + this.speedX;
                        //y position updates based on speed of y position
                        this.y = this.y + this.speedY + this.gravVelocity;
                        //this is a function to signal where bottom is
                        this.hitBottom();
                    }
                    //********************************

                    //************* FUNCTION FOR WHERE BOTTOM IS
                    this.hitBottom = function() 
                    {
                        //location of bottom is the height of canvas minus the current height
                        var bottom = scene.canvas.height - this.height;
                        //if y position if greater than bottom location
                        if (this.y > bottom) 
                        {
                            //then y position is at the bottom of the canvas
                            this.y = bottom;
                            //set the speed of gravity to 0 so we stop moving
                            this.gravVelocity = 0;
                        }
                    }
                    //**************************************

                    //************* FUNCTION FOR WHERE TOP IS
                    //this.hitTop = function() 
                    //{
                        //location of top is the height of canvas minus the current height
                    //    var top = scene.canvas.height + this.height;
                    //    //if y position if greater than top location
                     //   if (this.y > top) 
                    //    {
                    //        //then y position is at the bottom of the canvas
                     //       this.y = top;
                     //       //set the speed of gravity to 0 so we stop moving
                      //      this.gravVelocity = 0;
                     //   }
                   // }
                    //**************************************

                    //************** CRASH WITH FUNCTION
                    this.crashWith = function(otherobj) 
                    {
                        //VARIABLES
                        var myleft = this.x; //left = x pos
                        var myright = this.x + (this.width); //right = x + the width which would be the other side
                        var mytop = this.y; //top is the y value
                        var mybottom = this.y + (this.height); //bottom = y + height and that would be the opposite side
                        var otherleft = otherobj.x; //other left is the left of the other object
                        var otherright = otherobj.x + (otherobj.width); //other right is the x pos + the width of the other object
                        var othertop = otherobj.y; //the top of the other object is at the y position
                        var otherbottom = otherobj.y + (otherobj.height); //the bottom of the other object is at the y pos + the height
                        var crash = true; // setting crash bool to true
                        //conditionals for whether things are colliding or not
                        if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) 
                        {
                            crash = false;
                        }
                        //return current state of crash
                        return crash;
                    }
                }
                //**************************************************************************
                
                //******************* UPDATE GAME AREA FUNCTION
                function updateGameArea() 
                {
                    var x, height, gap, minHeight, maxHeight, minGap, maxGap;
                    for (i = 0; i < pipes.length; i += 1) {
                        if (flappyBird.crashWith(pipes[i])) 
                        {
                            return;
                        } 
                    }
                    scene.clear();
                    scene.frameNo += 1;
                    if (scene.frameNo == 1 || everyinterval(150)) {
                        x = scene.canvas.width;
                        minHeight = 20;
                        maxHeight = 200;
                        height = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);
                        minGap = 50;
                        maxGap = 200;
                        gap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);
                        pipes.push(new component(40, height, "green", x, 0));
                        pipes.push(new component(40, x - height - gap, "green", x, height + gap));
                    }
                    for (i = 0; i < pipes.length; i += 1) {
                        pipes[i].x += -1;
                        pipes[i].update();
                    }
                    score.text="SCORE: " + scene.frameNo;
                    score.update();
                    flappyBird.newPos();
                    flappyBeak.newPos();
                    flappyBird.update();
                    flappyBeak.update();
                }
                //******************************************************

                //*******FUNCTION FOR EVERY INTERVAL
                function everyinterval(n) 
                {
                    //if the frame divided by the current interval is divisible by 1 then return true
                    if ((scene.frameNo / n) % 1 == 0) 
                    {
                        return true;
                    }

                    return false;
                }
                //*****************************
                
                //******** FUNCTION ACCELERATE
                function accelerate(n) 
                {
                    //setting the gravity of both the bird and beak
                    flappyBird.gravity = n;
                    flappyBeak.gravity = n;
                }
                //*************************
                //SOURCE: https://www.w3schools.com/graphics/game_intro.asp
                </script>    
                <br>
            </div> 
    <br>
    <style>
        #input_box
        {
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            color:  #bf92bf;
            border-color: #bf92bf;
        }
        #input_area
        {
            width: 15%;
            height: 5%;
            
            box-sizing: border-box;
            text-align: center;
        }
    </style> 
	<form action="/addScore" method="POST" style="text-align: center;"> <!-- the index.js info and queries and entered scores -->
    	<input type="text" placeholder="Add a score" name="addScore" height="10px" id="input_area"/>
    	<button type="submit" id="input_box" style="text-align: center;">Send</button> <!-- sends info to data.db -->
	</form>
    <br>
    <br>
	{{else}} <!-- if not recognized as user than it is changed to make them register or login -->
    <div class="registrations"><!-- div class for styling purposes -->
    <h1>Please login to play the game</h1>
    <div class="textarea"><!-- div class for styling purposes -->
		<a href="/register">Register</a> <a href="/login">Login</a>
	{{/if}}
    </ul>
    </div>
    </div>
    </main>
    </div>
</body>
</html>